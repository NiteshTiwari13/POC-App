// pages/api/cancelSubscription.js

import { connectToDatabase } from '../../util/mongodb';
import stripe from 'stripe';

const stripeSecretKey = process.env.STRIPE_SECRET_KEY; // Replace with your actual secret key

const stripeClient = new stripe(stripeSecretKey);

export default async function handler(req, res) {
  if (req.method === 'POST') {
    try {
      const { userId } = req.body;

      // Fetch user subscription details from your database
      const userSubscription = await getUserSubscriptionFromDatabase(userId);

      if (!userSubscription) {
        return res.status(404).json({ error: 'User subscription not found' });
      }

      // Cancel the subscription on Stripe
      await stripeClient.subscriptions.del(userSubscription.subscriptionId);

      // Update the database to mark the subscription as canceled
      await markSubscriptionAsCanceled(userId);

      res.status(200).json({ message: 'Subscription canceled successfully' });
    } catch (error) {
      console.error('Error canceling subscription:', error);
      res.status(500).json({ error: 'Internal Server Error' });
    }
  } else {
    res.status(405).json({ error: 'Method Not Allowed' });
  }
}

// Helper functions to fetch user subscription details and mark subscription as canceled
// Implement these functions based on your database schema
async function getUserSubscriptionFromDatabase(userId) {
  // Implement logic to fetch user subscription from your database
}

async function markSubscriptionAsCanceled(userId) {
  // Implement logic to update the subscription status in your database
}





// pages/plans.js

// ... (previous imports)

const Plans = ({ plans }) => {
  const [selectedPlan, setSelectedPlan] = useState(null);
  const [billingInterval, setBillingInterval] = useState('monthly');
  const [subscriptionDetails, setSubscriptionDetails] = useState(null);

  const handleSelectPlan = (plan) => {
    setSelectedPlan(plan);
  };

  const handleSelectBillingInterval = (interval) => {
    setBillingInterval(interval);
  };

  const handlePayment = async (token) => {
    try {
      const response = await fetch('/api/subscribe', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId: 'USER_ID', // Replace with the actual user ID from your authentication system
          planId: selectedPlan._id,
          billingInterval,
          token,
        }),
      });

      if (response.ok) {
        console.log('Subscription created successfully');

        // Fetch the updated subscription details and update the state
        const updatedSubscriptionDetails = await fetchSubscriptionDetails('USER_ID');
        setSubscriptionDetails(updatedSubscriptionDetails);
      } else {
        const data = await response.json();
        console.error('Subscription creation failed:', data.error);
      }
    } catch (error) {
      console.error('Error during subscription creation:', error);
    }
  };

  const handleCancelSubscription = async () => {
    try {
      const response = await fetch('/api/cancelSubscription', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId: 'USER_ID', // Replace with the actual user ID from your authentication system
        }),
      });

      if (response.ok) {
        console.log('Subscription canceled successfully');

        // Fetch the updated subscription details and update the state
        const updatedSubscriptionDetails = await fetchSubscriptionDetails('USER_ID');
        setSubscriptionDetails(updatedSubscriptionDetails);
      } else {
        const data = await response.json();
        console.error('Subscription cancellation failed:', data.error);
      }
    } catch (error) {
      console.error('Error canceling subscription:', error);
    }
  };

  const fetchSubscriptionDetails = async (userId) => {
    try {
      await connectToDatabase();

      // Implement logic to fetch subscription details from your database
      const userSubscription = await Subscription.findOne({ userId });

      return JSON.parse(JSON.stringify(userSubscription));
    } catch (error) {
      console.error('Error fetching subscription details:', error);
      return null;
    }
  };

  return (
    <div>
      {/* ... (previous code) */}

      {subscriptionDetails && (
        <div>
          <h2>Your Subscription Details</h2>
          <p>Plan: {subscriptionDetails.plan.name}</p>
          <p>Description: {subscriptionDetails.plan.description}</p>
          <p>Price: ${subscriptionDetails.plan.price.toFixed(2)} / {subscriptionDetails.billingInterval}</p>
          {/* Add more details as needed */}
          <button onClick={handleCancelSubscription}>Cancel Subscription</button>
        </div>
      )}
    </div>
  );
};

// ... (rest of the code)
